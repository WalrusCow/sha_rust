extern crate sha;

use sha::Sha256;

#[test]
fn small_message() {
    // From NIST examples
    let expected_hash: [u8; 32] = [
        0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
        0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
        0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
        0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD,
    ];
    let mut s = Sha256::new();
    // 'abc'
    s.add_byte(97);
    s.add_byte(98);
    s.add_byte(99);
    let h = s.digest();
    assert_eq!(h, expected_hash);
}

#[test]
fn two_blocks() {
    // From NIST examples
    let expected_hash: [u8; 32] = [
        0x24, 0x8D, 0x6A, 0x61, 0xD2, 0x06, 0x38, 0xB8,
        0xE5, 0xC0, 0x26, 0x93, 0x0C, 0x3E, 0x60, 0x39,
        0xA3, 0x3C, 0xE4, 0x59, 0x64, 0xFF, 0x21, 0x67,
        0xF6, 0xEC, 0xED, 0xD4, 0x19, 0xDB, 0x06, 0xC1,
    ];

    let message = "abcdbcdecdefdefgefghfghighijhijkijkljkl\
                   mklmnlmnomnopnopq".as_bytes();
    let mut sha_digest = Sha256::new();
    for m in message.iter() {
        sha_digest.add_byte(*m);
    }
    assert_eq!(sha_digest.digest(), expected_hash);
}
